// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
 class Memory {
    static Array ram;
    static int free_pointer;
    static boolean head;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let free_pointer = 2048;
        let ram[free_pointer] = 16384 - free_pointer;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int temp, prev, p2;
        let head = true;
        let temp = free_pointer;
        while (ram[temp] < size){
            let head = false;
            let prev = temp;
            let temp = ram[temp + 1];
        }
        if (ram[temp] = size){
            if (~head){
                let ram[prev + 1] = ram[temp + 1];
                let p2 = temp;
            }
            else{
                let p2 = free_pointer;
                let free_pointer = ram[temp + 1];
            }
        }
        else
        {
            let p2 = Memory.isHead(temp, prev, size);
        }
        return p2;       
    }

    function int isHead(int temp, int prev, int size){
        var int res;
        if(head){
            let temp = free_pointer + size + 2;
            let ram[temp + 1] = ram[free_pointer + 1];
            let ram[temp] = ram[free_pointer] - size - 2;
            let ram[free_pointer] = size;
            let res = free_pointer;
            let free_pointer = temp;
        }
        else{
            let ram[prev + 1] = temp + size +2;
            let ram[temp + size + 2] = ram[temp] - size - 2;
            let ram[temp + size + 3] = ram[temp + 1];
            let ram[temp] = size;
            let res = temp;

        }
        return res;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int temp;
        let temp = free_pointer;
        let free_pointer = o;
        let ram[o + 1] = temp; 
        return;
    }    
}


 
