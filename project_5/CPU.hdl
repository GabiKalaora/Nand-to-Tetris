// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // *** load A register *** //
    And(a=instruction[15], b=instruction[5], out=CtoA); 
    Mux16(a=instruction, b=outA, sel=CtoA, out=regA); // check if it is A-instruction or C-instruction

    Not(in=instruction[15], out=temp); 
    Or(a=CtoA, b=temp, out=loadAreg); // check if not(instruction[15] == 1 and instruction[5] == 0) to load A register
    ARegister(in=regA, load=loadAreg, out=A, out[0..14]=addressM);


    // *** load A or M register *** //
    Mux16(a=A, b=inM, sel=instruction[12], out=AorM); // check if choose A or M register


    // *** load D register *** //
    And(a=instruction[15], b=instruction[4], out=CtoD); // check if instruction[15] == 1 and instruction[4] == 1) to load D register
    DRegister(in=outD, load=CtoD, out=D);


    // *** load the ALU *** //
    ALU(x=D, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
         out=outM, out=outD, out=outA, zr=zrOut, ng=ngOut);


    // *** write M *** //
    And(a=instruction[15], b=instruction[3], out=writeM);


    // load PC //
    Not(in=zrOut, out=notZero);
    Not(in=ngOut, out=notNegative);
    And(a=notZero, b=notNegative, out=pos);

    // check if ALU output fit the conditional in the instruction //
    And(a=zrOut, b=instruction[1], out=zero); // out == 0 ?
    And(a=ngOut, b=instruction[2], out=negative); // out < 0 ?
    Or(a=zero, b=negative, out=zeroOrNeg); // out == 0 || out < 0 ?

    And(a=pos, b=instruction[0], out=positive); // out > 0 ?
    Or(a=zeroOrNeg, b=positive, out=conditinal); // out == 0 || out < 0 || out > 0 ?

    And(a=instruction[15], b=conditinal, out=load); // it is C-instruction ?

    PC(in=A, load=load, inc=true, reset=reset, out[0..14]=pc);
}